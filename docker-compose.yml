services:
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
      target: runtime
      args:
        - REACT_APP_BFF_URL=${REACT_APP_BFF_URL}
    image: frontend:0.1.0
    links:
      - bff
    ports:
      - 3000:3000
    networks:
      - app-network

  bff:
    build:
      context: services/bff
      dockerfile: Dockerfile
      target: runtime
    image: go-bff:1.0.0
    depends_on:
      api:
        condition: service_healthy
    links:
      - api
    environment:
      - PORT=${PORT}
      - API_URL=${API_URL}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
    ports:
      - 8085:8085
    networks:
      - app-network

  api:
    build:
      context: services/api
      dockerfile: Dockerfile
      target: runtime
    image: java-backend-api:1.0.0
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - mysql
    environment:
      - DB_URL=${DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 8080:8080
    networks:
      - app-network

  mysql:
    image: mysql:9.1-oraclelinux9
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD} --silent"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/initdb.sql
    networks:
      - app-network

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge
